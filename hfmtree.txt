姓名：李禹佟
班级：电信1809
学号：U201813475
完成日期：2019年4月25日
题目：哈夫曼编译器
1需求分析
（1）输入字符和相应的频率能够初始化并储存哈夫曼树。
（2）根据所给字符编译成01码。
（3）根据所给01码解译成字符。
（4）能够打印出所建树的凹入表形式。整体通过菜单形式进行，以Q来推出；
2 概要设计
（1）struct hfm
{
  int weight;
  int parent,lchild,rchild;
};//以线性表的形式储存哈夫曼树；
int n;//全局变量用来储存字符的多少，输入字符，所建线性树，每个字符对应的密码，结束时free
char*a;
struct hfm*hp;
char**hc;
（2）void main()
{
   while(1)//用while和switch来实现菜单的可选功能，以Q为退出。
   {
       char s;
       printf("please input from I E D P T Q\n");
       scanf("%c",&s);
       switch(s)
       {
           case'I':init();break;
           case'E':enco();break;
           case'D':deco();break;
           case'T':treep();break;
           case'Q': free(a);free(hp);free(hc);return;
       }
   }
}
3详细设计
struct hfm
{
  int weight;
  int parent,lchild,rchild;
};
int n;
char*a;
struct hfm*hp;
char**hc;
void init()//初始化哈夫曼树并用结构数组储存，并将每个字符密码存入hc中
{
    int i,j,k;
    printf("please input the number of letter\n");
    scanf("%d",&n);
    a=(char*)malloc((n+1)*sizeof(char));
    hp=(struct hfm*)malloc((2*n)*sizeof(struct hfm));
    scanf("%s",a);
    for(i=1;i<=n;i++)
    {
       scanf("%d",&hp[i].weight);
    }
    for(i=n+1;i<2*n;i++)
    {
        hp[i].weight=0;
    }
    for(i=1;i<2*n;i++)
    {
        hp[i].parent=hp[i].rchild=hp[i].lchild=0;
    }
    for(i=n+1;i<2*n;++i)
    {
        int s1=-1,s2=-1;
        for(j=1;j<=i-1;j++)
        {
            if(hp[j].parent!=0)
            {
                continue;
            }
            if(s1==-1||s2==-1)
            {
                if(s1==-1)
                {
                    s1=j;
                }
                else
                {
                    s2=j;
                }
            }
            else
            {
                if(hp[j].weight<hp[s1].weight||hp[j].weight<hp[s2].weight)
                {
                    if(hp[s1].weight<hp[s2].weight)
                    {
                        s2=j;
                    }
                    else
                    {
                        s1=j;
                    }
                }
            }
        }
        hp[s1].parent=hp[s2].parent=i;
        hp[i].lchild=s1;hp[i].rchild=s2;
        hp[i].weight=hp[s1].weight+hp[s2].weight;
    }
    hc=(char**)malloc((n+1)*sizeof(char*));
    char*cd=(char*)malloc(n*sizeof(char));
    cd[n-1]='\0';
    for(i=1;i<=n;i++)
    {
         int start=n-1,c,f;
         for(c=i,f=hp[i].parent;f!=0;c=f,f=hp[f].parent)
         {
             if(hp[f].lchild==c)
             {
                 cd[--start]='0';
             }
             else
             {
                 cd[--start]='1';
             }
         }
         hc[i]=(char*)malloc((n-start)*sizeof(char));
         strcpy(hc[i],&cd[start]);
    }
    free(cd);
}
void enco()//通过输入字符和数组a中字符对比，从hc中找到对应的密码输出。
{
    int i,j,k;
    char y[100];
   printf("please input the content \n");
   scanf("%s",y);
   for(i=0;i<=strlen(y)-1;i++)
   {
       for(j=0;j<=n-1;j++)
       {
           if(a[j]==y[i])
           {
               printf("%s\t",hc[j+1]);
               break;
           }
       }
       if(j>n-1)
       {
           printf("error\n");
           return;
       }
   }
   printf("\n");
}
void deco()//同理用循环找出不重复密码对应的字符输出；
{
    int i,j,k,h=0,m=0;
    printf("please input the code");
    char w[100];
    scanf("%s",w);
  while(h<=strlen(w)-1)
  {
      m=h;
     for(i=1;i<=n;i++)
     {
        k=strlen(hc[i]);
        for(j=0;j<=k-1;j++,h++)
        {
            if(hc[i][j]==w[h])
            {
               continue;
            }
            else
            {
                break;
            }
        }
        if(j>k-1)
        {
            printf("%c",a[i-1]);
            break;
        }
        else
        {
            h=m;
        }
    }
    if(h==m)
    {
       printf("can not translate\n");
       return;
    }
  }
}
void treep()//该打印函数基于下面的digui函数
{
    int i;
    for(i=1;i<2*n;i++)
    {
        if(hp[i].parent==0&&hp[i].weight!=0)
        {
            digui(hp[i],i,0);
        }
    }

}
void digui(struct hfm z,int o,int v)//递归接收当前结构体，何其对应的a中字符的位置，v是层数即深度用来判断所打空格数；
{
    int i;
    for(i=1;i<=v;i++)
    {
        printf(" ");
    }
    if(o>n)
        {
            printf("#\n");
        }
        else
        {
            printf("%c\n",a[o-1]);
        }
    if(z.lchild==0&&z.rchild==0)
    {
        return;
    }
    else if(z.lchild==0)
    {
        digui(hp[z.rchild],z.rchild,v+1);
    }
    else if(z.rchild==0)
    {
        digui(hp[z.lchild],z.lchild,v+1);
    }
    else
    {
       digui(hp[z.lchild],z.lchild,v+1);
       digui(hp[z.rchild],z.rchild,v+1);
    }
}
void main()
{
   while(1)//输入不同字母以实现不同的功能
   {
       char s;
       printf("please input from I E D P Q\n");
       scanf("%c",&s);
       switch(s)
       {
           case'I':init();break;
           case'E':enco();break;
           case'D':deco();break;
           case'T':treep();break;
           case'Q': free(a);free(hp);free(hc);return;
       }
   }
}

4调试分析
（1）始终无法译出第二个字母 原因：结束循环的时间点错误。
（2）时空分析：算法时间复杂度为C(2n-2,n-1)/n。空间复杂度为O（n^2）。
5使用说明
请先输入I进行哈夫曼树的初始化
之后可以输入E进行字符向密码的转化
输入D可以进行密码的解译
输入T打印树
最后请输入Q结束程序
6测试结果输入 4 abcd  1234
所得树（凹入表形式）为
              #
                d
                #
                  c
                  #
                    a
                    b
